Differences Between conftl and web2py's Templating Language (yatl)
==================================================================

The templating language of web2py is called yatl. yatl does it's job very well with the HTML templating,
conftl has features for textual data and does its job exactly for templating configuration files.

The differences between conftl and yatl
---------------------------------------

* conftl does not escape XML, yatl escapes XML by default:

    Imagine you have s = "< mystring >"

    yatl output of {{=s}} will be: "&lt; mystring &gt;"
    contl output of {{=s}} will be as you expect: "< mystring >"

* conftl does some end of line sanitization for textual data:

    The following conftl snippet would have the output a developer would expect:
    {{if True:}}
    X
    {{pass}}

    The output: X <Enter>

    In case you write the same snipped in yatl, it will produce some unneeded empty lines. In order to have
    the expected textual output yatl snipped should be:

    {{if True:}}X{{pass}}

    , which is in my opinion less readable for a Python developer.

* conftl provides command line tool and you may template your configuration files without writing Python scripts:

    render -i mytemplate.tmpl -o myconfigurationfile.conf

    Features:
        - input template file or template code on stdin
        - output configuration file or output on stdout
        - context variables from command line
        - context variables from json file
        - context variables from shell environment

    (see all features described in README.md)

* conftl function render(...) and decorator template(...) have arguments, which are more convenient
for templating configuration files, while yatl is made for convenient usage with web frameworks.

    Examples:
    render(infile='mytemplate.tmpl', outfile='myconf.conf')
    render('mytemplate.tmpl', 'myconf.conf')

    render(...) returns:
    string in case outfile is not given
    None if outfile is given (in this case it writes the outfile)

    yatl's render(...) arguments and output are more convenient for usage with web frameworks and HTML data.

* conftl has small codebase, optimized for textual data.

    I have not done performance and memory usage comparison between conftl and yatl, but conftl should be
    optimized better for textual data.

* yatl is optimized for HTML, conftl is not

    The XML escaping and function arguments and fucntion output in yatl are there for a reason.
    yatl has multiple HTML helpers. It is best suited for usage with web frameworks.

    All features of conftl are towards usage with configuration files templating. Suitable for sysadmins,
    devops and similar roles.


Conclusion
----------

Use conftl where you need to template text, and in particular configuration files.
Use yatl for HTML data and for web frameworks integration.
